rename("Genotype2" = "var")
colnames(blue_df(4:6))
colnames(blue_df)
colnames(blue_df,4:6)
colnames(blue_df)[4:6]
print(kable(blue_df,
col.names = c("Genotype","Estimated marginal mean",
colnames(blue_df)[3:6])))
rep("c",5)
print(kable(blue_df,
col.names = c("Genotype","Estimated marginal mean",
colnames(blue_df)[3:6]),
align = c("l",rep("c",5))
))
print(kable(blue_df,
col.names = c("Genotype","Least-squares mean",
colnames(blue_df)[3:6]),
align = c("l",rep("c",5)),
caption = "Least-squares mean from the mixed effects model including genotype as a fixed effect and participant as a random effect"
))
print(kable(blue_df,
col.names = c("Genotype","Least-squares mean",
colnames(blue_df)[3:6]),
align = c("l",rep("c",5)),
caption = "Estimated marginal means from the mixed effects model including genotype as a fixed effect and participant as a random effect"
))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
select(-(SE:upper.CL))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
select(-(SE:upper.CL,label))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
select(-c(SE:upper.CL,label))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df)
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
select(-c(SE:upper.CL,label))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:flesh,SE:upper.CL,label:Genotype2))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:Flesh,SE:upper.CL,label:Genotype2))
kable(blue_df,
col.names = c("Genotype","Least-squares mean",
colnames(blue_df)[3:6]),
align = c("l",rep("c",5)),
caption = "Estimated marginal means from the mixed effects model including genotype as a fixed effect and participant as a random effect") %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
row_spec(0, bold = TRUE)
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:Flesh,SE:upper.CL,label:Genotype2)) %>%
scale()
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay,SE:upper.CL,label:Genotype2)) %>%
scale()
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay,SE:upper.CL,label:Genotype2)) %>%
scale()
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df)
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID")
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay,SE:upper.CL,label:Genotype2))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay,SE:upper.CL,label:Genotype2))
flesh_type <- c("Yellow","Red")
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay,SE:upper.CL,label:Genotype2))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:Genotype,SE:upper.CL,label:Genotype2))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:Genotype,SE:upper.CL,label:Genotype2)) %>%
relocate(Flesh, .after = "emmeans")
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:Genotype,SE:upper.CL,label:Genotype2)) %>%
relocate(Flesh, .after = "emmean")
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:Genotype,SE:upper.CL,label:Genotype2)) %>%
relocate(Flesh, .after = "emmean") %>%
select(-c(decanal,methyl_hexanoate,octanal,E_2_nonal, nonanal))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:Genotype,SE:upper.CL,label:Genotype2)) %>%
relocate(Flesh, .after = "emmean") %>%
select(-c(Decanal,methyl_hexanoate,octanal,E_2_nonal, nonanal))
model_data <-
left_join(PCA_data %>% rownames_to_column(var = "ID"), genotype_table) %>%
left_join(blue_df) %>%
filter(!is.na(emmean)) %>%
column_to_rownames(var = "ID") %>%
select(-c(assay:Genotype,SE:upper.CL,label:Genotype2)) %>%
relocate(Flesh, .after = "emmean") %>%
select(-c(Decanal,Methyl_hexanoate,Octanal,E_2_nonal, Nonanal))
met_cols <- c(1:20)
y <- 39
flesh_type <- c("Yellow","Red", "Red & Yellow")
met_cols <- c(1:20)
sens_cols <- c(21:38)
y <- 39
model_data %>% filter(!Flesh == "Yellow")
summary(model_data %>% filter(!Flesh == "Yellow"))
summary(model_data %>% filter(!Flesh == "Red"))
summary(model_data %>% filter(!Flesh == "Red & Yellow"))
pap <- (model_data %>% filter(!Flesh == "Red & Yellow"))
pap <- (model_data %>% filter(!Flesh == "Red"))
pap <- (model_data %>% filter(!Flesh == "Yellow"))
pap <-
model_data %>%
filter(!Flesh == flesh_type[i]) %>%
}
pap <-
model_data %>%
filter(!Flesh == "Red") %>%
#flesh_type[i]) %>%
select(-Flesh)
pap <-
model_data %>%
filter(!Flesh == "Red") %>%
#flesh_type[i]) %>%
select(-Flesh) %>%
scale()
carX <- as.matrix(cbind(Y=pap[,y], pap[,met_cols]))
View(carX)
grid <- expand.grid(.n.trees = c(500),
.interaction.depth = c(5),
.shrinkage = c(0.01),
.n.minobsinnode = c(1))
trnCtrl <- trainControl(method = "cv", number = 5)
gbm <- train(Y ~ .,
data = carX,
method = "gbm",
trControl = trnCtrl,
tuneGrid = grid)
# make table
wts3 <- as.data.frame(varImp(object = gbm)$importance)
View(wts3)
# BGLR
trnY <- pap[,y]
ETA <- list(list(X = pap[,met_cols], model = 'BayesA'))
fit_BA <- BGLR(y = trnY, ETA = ETA, nIter = 3000, burnIn = 1000,
thin = 100, saveAt = '', df0 = 5, S0 = NULL,
weights = NULL, R2 = 0.5)
fit_BA$ETA[[1]]$b
# make table
wts3 <- as.data.frame(varImp(object = gbm)$importance) %>%
cbind(fit_BA$ETA[[1]]$b)
# GBM sensory
carX <- as.matrix(cbind(Y=pap[,y], pap[,sens_cols)))
grid <- expand.grid(.n.trees = c(500),
.interaction.depth = c(5),
.shrinkage = c(0.01),
.n.minobsinnode = c(1))
trnCtrl <- trainControl(method = "cv", number = 5)
gbm <- train(Y ~ .,
data = carX,
method = "gbm",
trControl = trnCtrl,
tuneGrid = grid)
# BGLR sensory
trnY <- pap[,y]
ETA <- list(list(X = pap[,sens_cols], model = 'BayesA'))
fit_BA <- BGLR(y = trnY, ETA = ETA, nIter = 3000, burnIn = 1000,
thin = 100, saveAt = '', df0 = 5, S0 = NULL,
weights = NULL, R2 = 0.5)
} else {
}
}
# caret GBM
carX <- as.matrix(cbind(Y=pap[,41], pap[,1:20]))
grid <- expand.grid(.n.trees = c(500), .interaction.depth = c(5), .shrinkage = c(0.01), .n.minobsinnode = c(1))
trnCtrl <- trainControl(method = "cv", number = 5)
gbm <- train(Y ~ ., data = carX, method = "gbm", trControl = trnCtrl, tuneGrid = grid)
# BGLR
trnY <- pap[,41]
ETA <- list(list(X = pap[,1:20], model = 'BayesA'))
fit_BA <- BGLR(y = trnY, ETA = ETA, nIter = 30000, burnIn = 10000,
thin = 100, saveAt = '', df0 = 5, S0 = NULL,
weights = NULL, R2 = 0.5)
# make table
wts3 <- as.data.frame(varImp(object = gbm)$importance) %>%
cbind(fit_BA$ETA[[1]]$b) %>% rownames_to_column(var = "var") %>%
left_join(readRDS("data/class_key.RDS")) %>% mutate(variety = rep("Yellow",20),
group = ifelse(row_number() == 20, "Other",group),
label = ifelse(row_number() == 20, "Water content",label))
names(wts3)[2] <- "x"
names(wts3)[3] <- "y"
saveRDS(wts3,"data/consumer_data/liking_modelstats3.RDS")
# red liking using mean liking data
# using BLUE's
pap <- readRDS("data/consumer_data/consumer_liking_blue.RDS") %>%
filter(Flesh == "Red") %>%
select(-c(all_of(cutvariables),1:4)) %>%
scale()
cor(pap[,1:21])
# caret GBM
carX <- as.matrix(cbind(Y=pap[,42], pap[,1:21]))
grid <- expand.grid(.n.trees = c(500, 750, 1000), .interaction.depth = c(5,7,10), .shrinkage = c(0.01,0.02,0.05), .n.minobsinnode = c(3,5))
trnCtrl <- trainControl(method = "cv", number = 10)
gbm <- train(Y ~ ., data = carX, method = "gbm", trControl = trnCtrl, tuneGrid = grid)
# BGLR
trnY <- pap[,42]
ETA <- list(list(X = pap[,1:21], model = 'BayesA'))
fit_BA <- BGLR(y = trnY, ETA = ETA, nIter = 30000, burnIn = 10000,
thin = 100, saveAt = '', df0 = 5, S0 = NULL,
weights = NULL, R2 = 0.5)
# make table
wts2 <- as.data.frame(varImp(object = gbm)$importance) %>%
cbind(fit_BA$ETA[[1]]$b) %>% rownames_to_column(var = "var") %>%
left_join(readRDS("data/class_key.RDS")) %>% mutate(variety = rep("Red",21),
group = ifelse(row_number() == 21, "Other",group),
label = ifelse(row_number() == 21, "Water content",label))
names(wts2)[2] <- "x"
names(wts2)[3] <- "y"
saveRDS(wts2,"data/consumer_data/liking_modelstats2.RDS")
# All liking using mean liking data
# using BLUE's
pap <- readRDS("data/consumer_data/consumer_liking_blue.RDS") %>%
select(-c(all_of(cutvariables),1:4))%>%
scale()
cor(pap[,1:21])
# caret GBM
carX <- as.matrix(cbind(Y=pap[,42], pap[,1:21]))
grid <- expand.grid(.n.trees = c(500, 750, 1000), .interaction.depth = c(5,7,10), .shrinkage = c(0.01,0.02,0.05), .n.minobsinnode = c(3,5))
trnCtrl <- trainControl(method = "cv", number = 10)
gbm <- train(Y ~ ., data = carX, method = "gbm", trControl = trnCtrl, tuneGrid = grid)
# BGLR
trnY <- pap[,42]
ETA <- list(list(X = pap[,1:21], model = 'BayesA'))
fit_BA <- BGLR(y = trnY, ETA = ETA, nIter = 30000, burnIn = 10000,
thin = 100, saveAt = '', df0 = 5, S0 = NULL,
weights = NULL, R2 = 0.5)
# make table
wts1 <- as.data.frame(varImp(object = gbm)$importance) %>%
cbind(fit_BA$ETA[[1]]$b) %>% rownames_to_column(var = "var") %>%
left_join(readRDS("data/class_key.RDS")) %>% mutate(variety = rep("Red & Yellow",21),
group = ifelse(row_number() == 21, "Other",group),
label = ifelse(row_number() == 21, "Water content",label))
names(wts1)[2] <- "x"
names(wts1)[3] <- "y"
```
carX <- as.matrix(cbind(Y=pap[,y], pap[,sens_cols)))
carX <- as.matrix(cbind(Y=pap[,y], pap[,sens_cols]))
grid <- expand.grid(.n.trees = c(500),
.interaction.depth = c(5),
.shrinkage = c(0.01),
.n.minobsinnode = c(1))
trnCtrl <- trainControl(method = "cv", number = 5)
gbm <- train(Y ~ .,
data = carX,
method = "gbm",
trControl = trnCtrl,
tuneGrid = grid)
trnY <- pap[,y]
ETA <- list(list(X = pap[,sens_cols], model = 'BayesA'))
fit_BA <- BGLR(y = trnY, ETA = ETA, nIter = 3000, burnIn = 1000,
thin = 100, saveAt = '', df0 = 5, S0 = NULL,
weights = NULL, R2 = 0.5)
as.data.frame(varImp(object = gbm)$importance)
wts2 <- as.data.frame(varImp(object = gbm)$importance) %>%
cbind(fit_BA$ETA[[1]]$b)
View(wts2)
names(wts2)[1] <- paste0(flesh_type[i],"_sens_gbm")
names(wts2)[1] <- paste0(flesh_type[1],"_sens_gbm")
View(wts)
carX <- as.matrix(cbind(Y=pap[,y], pap[,met_cols]))
carX <- as.matrix(cbind(Y=pap[,y], pap[,met_cols]))
grid <- expand.grid(.n.trees = c(500),
.interaction.depth = c(5),
.shrinkage = c(0.01),
.n.minobsinnode = c(1))
trnCtrl <- trainControl(method = "cv", number = 5)
gbm <- train(Y ~ .,
data = carX,
method = "gbm",
trControl = trnCtrl,
tuneGrid = grid)
# BGLR metabolites
trnY <- pap[,y]
ETA <- list(list(X = pap[,met_cols], model = 'BayesA'))
fit_BA <- BGLR(y = trnY, ETA = ETA, nIter = 3000, burnIn = 1000,
thin = 100, saveAt = '', df0 = 5, S0 = NULL,
weights = NULL, R2 = 0.5)
# make table
wts <- as.data.frame(varImp(object = gbm)$importance) %>%
cbind(fit_BA$ETA[[1]]$b)
names(wts)[1] <- paste0(flesh_type["Yellow"],"_mets_gbm")
names(wts)[2] <- paste0(flesh_type["Yellow"],"_mets_beta")
wts3 <- wts %>%
rownames_to_column(var = "var")
pivot_longer(cols = 2:3, values_to = "coord")
wts3 <- wts %>%
rownames_to_column(var = "var")
pivot_longer(cols = wts[,2:3], values_to = "coord")
names(wts)[1] <- paste0(flesh_type[1],"_mets_gbm")
names(wts)[2] <- paste0(flesh_type[1],"_mets_beta")
wts3 <- wts %>%
rownames_to_column(var = "var")
pivot_longer(cols = 2:3, values_to = "coord")
wts[,2:3]
wts[,c(2:3)]
wts[,1:2]
colnames(wts[,2:3])
colnames(wts[,1:2])
wts3 <- wts %>%
rownames_to_column(var = "var")
pivot_longer(cols = colnames(wts[,2:3]), values_to = "coord")
wts3 <- wts %>%
rownames_to_column(var = "var") %>%
pivot_longer(cols = colnames(wts[,2:3]), values_to = "coord")
wts3 <- wts %>%
rownames_to_column(var = "var")
wts3 <- wts %>%
rownames_to_column(var = "var") %>%
pivot_longer(cols = colnames(wts[,1:2]), values_to = "coord")
carX <- as.matrix(cbind(Y=pap[,y], pap[,sens_cols]))
grid <- expand.grid(.n.trees = c(500),
.interaction.depth = c(5),
.shrinkage = c(0.01),
.n.minobsinnode = c(1))
trnCtrl <- trainControl(method = "cv", number = 5)
gbm <- train(Y ~ .,
data = carX,
method = "gbm",
trControl = trnCtrl,
tuneGrid = grid)
# BGLR sensory
trnY <- pap[,y]
ETA <- list(list(X = pap[,sens_cols], model = 'BayesA'))
fit_BA <- BGLR(y = trnY, ETA = ETA, nIter = 3000, burnIn = 1000,
thin = 100, saveAt = '', df0 = 5, S0 = NULL,
weights = NULL, R2 = 0.5)
wts2 <- as.data.frame(varImp(object = gbm)$importance) %>%
cbind(fit_BA$ETA[[1]]$b)
names(wts2)[1] <- paste0(flesh_type[1],"_sens_gbm")
names(wts2)[2] <- paste0(flesh_type[1],"_sens_beta")
wts2
wts2 %>%
rownames_to_column(var = "var") %>%
pivot_longer(cols = colnames(wts2[,1:2]), values_to = "coord")
wts3 <- wts3 %>%
rbind(
wts2 %>%
rownames_to_column(var = "var") %>%
pivot_longer(cols = colnames(wts2[,1:2]), values_to = "coord")
)
flesh_type <- c("Red","Yellow", "Red_Yellow")
str(model_data)
list(
n_trees = c(500),
int_depth = c(5),
shrinkage = c(0.01),
min_obs = c(1),
cv_folds = 5,
bglr_iter = 30000,
bglr_burnin = 10000
)
640-450
706-613
# Function to run models for a specific flesh type
run_models <- function(data, flesh_type, met_cols, sens_cols, y_col = 39) {
# Filter and prepare data
pap <- data %>%
filter(!Flesh == flesh_type) %>%
select(-Flesh) %>%
scale()
# Define model parameters based on flesh type
model_params <- if(flesh_type == "Red") {
list(
n_trees = c(500),
int_depth = c(5),
shrinkage = c(0.01),
min_obs = c(1),
cv_folds = 5,
bglr_iter = 30000,
bglr_burnin = 10000
)
} else {
list(
n_trees = c(500, 750, 1000),
int_depth = c(5, 7, 10),
shrinkage = c(0.01, 0.02, 0.05),
min_obs = c(3, 5),
cv_folds = 10,
bglr_iter = 30000,
bglr_burnin = 10000
)
}
# Function to run a single model set (metabolites or sensory)
run_model_set <- function(cols, type) {
# Prepare data
carX <- as.matrix(cbind(Y = pap[,y_col], pap[,cols]))
# GBM
grid <- expand.grid(
.n.trees = model_params$n_trees,
.interaction.depth = model_params$int_depth,
.shrinkage = model_params$shrinkage,
.n.minobsinnode = model_params$min_obs
)
gbm_model <- train(
Y ~ .,
data = carX,
method = "gbm",
trControl = trainControl(method = "cv", number = model_params$cv_folds),
tuneGrid = grid
)
# BGLR
bglr_model <- BGLR(
y = pap[,y_col],
ETA = list(list(X = pap[,cols], model = 'BayesA')),
nIter = model_params$bglr_iter,
burnIn = model_params$bglr_burnin,
thin = 100,
saveAt = '',
df0 = 5,
R2 = 0.5
)
# Combine results
bind_rows(
varImp(gbm_model)$importance %>%
rownames_to_column("var") %>%
mutate(model = paste0(flesh_type, "_", type, "_gbm")),
tibble(
var = colnames(pap[,cols]),
Overall = bglr_model$ETA[[1]]$b,
model = paste0(flesh_type, "_", type, "_beta")
)
) %>%
rename(coord = Overall)
}
# Run both model sets and combine results
bind_rows(
run_model_set(met_cols, "mets"),
run_model_set(sens_cols, "sens")
)
}
# Main execution
set.seed(100)
flesh_types <- c("Red", "Yellow", "Red_Yellow")
met_cols <- 1:20
sens_cols <- 21:38
save.image("C:/Users/JoshLomax_sc1x6h1/OneDrive - Griffith University (1)/Josh_PhD_Flavour_Genomics/Project_Information/Experiments/Papaya_sensory_metabolomics/25apr1.RData")
